/**
 * Tom Crowfoot
 * 10037477
 * CPSC 418
 * Assignment 1 Part 5
 * Encryption and authentication part of the assignment
 */

import java.io.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.util.Random;
import java.util.Arrays;
// import java.security.interfaces.*;
// import java.security.interfaces.DSAKey;
// import java.math.*;
// import java.security.SecureRandom;
// import cryptix.util.core.BI;
// import cryptix.util.core.Hex;
// import cryptix.provider.key.*;
// import cryptix.provider.md.*;

public class decryptFile{
	private FileInputStream in;
	private FileOutputStream out;	
	private byte[] data_read; // file read
	private int read; // number of bytes read from file
    private byte[] digest_new; // hash of the data
    // private KeyGenerator key_gen; // key generator for AES-128
    // private SecretKey sec_key; // secret key generated by key_gen
	private byte[] raw; // 
	private SecretKeySpec sec_key_spec; // 
	private Cipher sec_cipher; // 
	private byte[] plaintext; // 
	
	public static void main(String args[]){
		try{
			if(args.length!=2){
				System.out.println("usage: decryptFile ciphertext-filename seed");
				System.exit(1);
			}
		decryptFile prog = new decryptFile();
		prog.read_the_file(args[0]);
		prog.set_up_keys(args[1]);
		prog.do_decrypt();
		prog.check_digest();
		prog.do_write();
		}catch(Exception e){
			System.out.print(e);
			System.exit(1);
		}
	}
	
	private void do_write(){
		try{
			out = new FileOutputStream("decrypted_output");
			out.write(plaintext, 1+plaintext[0], plaintext.length-20-plaintext[0]-1);
			out.close();
		}catch(Exception e){
			System.out.println(e);
			System.exit(1);
		}
	}
	
	private void do_decrypt(){
		try{
		    sec_cipher.init(Cipher.DECRYPT_MODE, sec_key_spec);
			plaintext = sec_cipher.doFinal(data_read);
		}catch(Exception e){
			// System.out.println(e);
			System.out.println("Incorrect seed");
			System.exit(1);
		}
	}

    private void check_digest(){
	try{
	    byte[] digest = new byte[20];
	    byte[] message;
	    String length = "";
	    for(int i=1; i<=plaintext[0]; i++)
		length+=Character.toString((char)plaintext[i]);
	    message = new byte[Integer.parseInt(length)]; 
	    System.arraycopy(plaintext, 1+plaintext[0], message, 0, Integer.parseInt(length));// copy message to calculate digest
	    System.arraycopy(plaintext, 1+plaintext[0]+Integer.parseInt(length), digest, 0, 20);// copy digest that we recieved to check
	    MessageDigest sha = MessageDigest.getInstance("SHA1");
	    digest_new = sha.digest(message);
	    if(Arrays.equals(digest, digest_new))
		System.out.println("Digest matchs.");
	    else
		System.out.println("Digest does not match.");
	}catch(Exception e){
	    System.out.print(e);
	    System.exit(1);
	}
    }

	private void set_up_keys(String seed){
		try{
		    /*SecureRandom rand = new SecureRandom(seed.getBytes());
			key_gen = KeyGenerator.getInstance("AES");
			key_gen.init(128);
			sec_key = key_gen.generateKey();
			raw = sec_key.getEncoded();*/
		    Random rand = new Random((long)seed.hashCode());
		    raw = new byte[16];
		    rand.nextBytes(raw);
			sec_key_spec = new SecretKeySpec(raw, "AES");
			sec_cipher = Cipher.getInstance("AES");
		}catch(Exception e){
			System.out.println(e);
			System.exit(1);
		}
	}
		
	private void read_the_file(String input){
		try{
			in = new FileInputStream(input);
			data_read = new byte[in.available()];
			read = in.read(data_read);
			in.close();
		}catch(Exception e){
			System.out.print(e);
			System.exit(1);
		}
	}
}



