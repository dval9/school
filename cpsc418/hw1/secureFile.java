/**
 * Tom Crowfoot
 * 10037477
 * CPSC 418
 * Assignment 1 Part 5
 * Encryption and authentication part of the assignment
 */

import java.io.*;
import java.security.*;
import javax.crypto.*;
import javax.crypto.spec.*;
import java.util.Random;
// import java.security.interfaces.*;
// import java.security.interfaces.DSAKey;
// import java.math.*;
// import java.security.SecureRandom;
// import cryptix.util.core.BI;
// import cryptix.util.core.Hex;
// import cryptix.provider.key.*;
// import cryptix.provider.md.*;

public class secureFile{
	private FileInputStream in;
	private FileOutputStream out;	
	private byte[] data_read; // file read
	private int read; // number of bytes read from file
	private byte[] digest; // hash of the data
    // private KeyGenerator key_gen; // key generator for AES-128
    // private SecretKey sec_key; // secret key generated by key_gen
	private byte[] raw; // 
	private SecretKeySpec sec_key_spec; // 
	private Cipher sec_cipher; // 
	private byte[] aes_ciphertext; // 
	
	public static void main(String args[]){
		try{
			if(args.length!=2){
				System.out.println("usage: secureFile plaintext-filename seed");
				System.exit(1);
			}
		secureFile prog = new secureFile();
		prog.read_the_file(args[0]);
		prog.do_digest();
		prog.set_up_keys(args[1]);
		prog.do_encrypt();
		prog.do_write();
		}catch(Exception e){
			System.out.print(e);
			System.exit(1);
		}
	}
	
	private void do_write(){
		try{
			out = new FileOutputStream("ciphertext_output");
			out.write(aes_ciphertext);
			out.close();
		}catch(Exception e){
			System.out.println(e);
			System.exit(1);
		}
	}
	
	private void do_encrypt(){
		try{
			byte[] temp = String.valueOf(read).getBytes();// number of bytes in file, to help find digest when decrypting
			byte[] text = new byte[1+temp.length+data_read.length+digest.length];// file to decrypt with metadata+message+digest
			text[0] = (byte)temp.length;// number of bytes used in writing message length
			System.arraycopy(temp, 0, text, 1, temp.length);
			System.arraycopy(data_read, 0, text, 1+temp.length, data_read.length);
			System.arraycopy(digest, 0, text, 1+temp.length+data_read.length, digest.length);
			sec_cipher.init(Cipher.ENCRYPT_MODE, sec_key_spec);
			aes_ciphertext = sec_cipher.doFinal(text);
		}catch(Exception e){
			System.out.println(e);
			System.exit(1);
		}
	}
	
	private void set_up_keys(String seed){
		try{
		    /*SecureRandom rand = new SecureRandom(seed.getBytes());
			key_gen = KeyGenerator.getInstance("AES");
			key_gen.init(128);
			sec_key = key_gen.generateKey();
			raw = sec_key.getEncoded();*/
		    Random rand = new Random((long)seed.hashCode());
		    raw = new byte[16];
		    rand.nextBytes(raw);
			sec_key_spec = new SecretKeySpec(raw, "AES");
			sec_cipher = Cipher.getInstance("AES");
		}catch(Exception e){
			System.out.println(e);
			System.exit(1);
		}
	}
	
	private void do_digest(){
		try{
			MessageDigest sha = MessageDigest.getInstance("SHA1");
			digest = sha.digest(data_read);
		}catch(Exception e){
			System.out.print(e);
			System.exit(1);
		}
	}
	
	private void read_the_file(String input){
		try{
			in = new FileInputStream(input);
			data_read = new byte[in.available()];
			read = in.read(data_read);
			in.close();
		}catch(Exception e){
			System.out.print(e);
			System.exit(1);
		}
	}
}



